# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from . import calibration_pb2 as calibration__pb2


class CalibrationServiceStub(object):
  """Enable to calibrate sensors of a drone such as gyro, accelerometer, and magnetometer.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.SubscribeCalibrateGyro = channel.unary_stream(
        '/mavsdk.rpc.calibration.CalibrationService/SubscribeCalibrateGyro',
        request_serializer=calibration__pb2.SubscribeCalibrateGyroRequest.SerializeToString,
        response_deserializer=calibration__pb2.CalibrateGyroResponse.FromString,
        )
    self.SubscribeCalibrateAccelerometer = channel.unary_stream(
        '/mavsdk.rpc.calibration.CalibrationService/SubscribeCalibrateAccelerometer',
        request_serializer=calibration__pb2.SubscribeCalibrateAccelerometerRequest.SerializeToString,
        response_deserializer=calibration__pb2.CalibrateAccelerometerResponse.FromString,
        )
    self.SubscribeCalibrateMagnetometer = channel.unary_stream(
        '/mavsdk.rpc.calibration.CalibrationService/SubscribeCalibrateMagnetometer',
        request_serializer=calibration__pb2.SubscribeCalibrateMagnetometerRequest.SerializeToString,
        response_deserializer=calibration__pb2.CalibrateMagnetometerResponse.FromString,
        )
    self.SubscribeCalibrateGimbalAccelerometer = channel.unary_stream(
        '/mavsdk.rpc.calibration.CalibrationService/SubscribeCalibrateGimbalAccelerometer',
        request_serializer=calibration__pb2.SubscribeCalibrateGimbalAccelerometerRequest.SerializeToString,
        response_deserializer=calibration__pb2.CalibrateGimbalAccelerometerResponse.FromString,
        )
    self.Cancel = channel.unary_unary(
        '/mavsdk.rpc.calibration.CalibrationService/Cancel',
        request_serializer=calibration__pb2.CancelRequest.SerializeToString,
        response_deserializer=calibration__pb2.CancelResponse.FromString,
        )


class CalibrationServiceServicer(object):
  """Enable to calibrate sensors of a drone such as gyro, accelerometer, and magnetometer.
  """

  def SubscribeCalibrateGyro(self, request, context):
    """Perform gyro calibration.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SubscribeCalibrateAccelerometer(self, request, context):
    """Perform accelerometer calibration.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SubscribeCalibrateMagnetometer(self, request, context):
    """Perform magnetometer caliration.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SubscribeCalibrateGimbalAccelerometer(self, request, context):
    """Perform gimbal accelerometer calibration.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Cancel(self, request, context):
    """Cancel ongoing calibration process.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_CalibrationServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'SubscribeCalibrateGyro': grpc.unary_stream_rpc_method_handler(
          servicer.SubscribeCalibrateGyro,
          request_deserializer=calibration__pb2.SubscribeCalibrateGyroRequest.FromString,
          response_serializer=calibration__pb2.CalibrateGyroResponse.SerializeToString,
      ),
      'SubscribeCalibrateAccelerometer': grpc.unary_stream_rpc_method_handler(
          servicer.SubscribeCalibrateAccelerometer,
          request_deserializer=calibration__pb2.SubscribeCalibrateAccelerometerRequest.FromString,
          response_serializer=calibration__pb2.CalibrateAccelerometerResponse.SerializeToString,
      ),
      'SubscribeCalibrateMagnetometer': grpc.unary_stream_rpc_method_handler(
          servicer.SubscribeCalibrateMagnetometer,
          request_deserializer=calibration__pb2.SubscribeCalibrateMagnetometerRequest.FromString,
          response_serializer=calibration__pb2.CalibrateMagnetometerResponse.SerializeToString,
      ),
      'SubscribeCalibrateGimbalAccelerometer': grpc.unary_stream_rpc_method_handler(
          servicer.SubscribeCalibrateGimbalAccelerometer,
          request_deserializer=calibration__pb2.SubscribeCalibrateGimbalAccelerometerRequest.FromString,
          response_serializer=calibration__pb2.CalibrateGimbalAccelerometerResponse.SerializeToString,
      ),
      'Cancel': grpc.unary_unary_rpc_method_handler(
          servicer.Cancel,
          request_deserializer=calibration__pb2.CancelRequest.FromString,
          response_serializer=calibration__pb2.CancelResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'mavsdk.rpc.calibration.CalibrationService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
