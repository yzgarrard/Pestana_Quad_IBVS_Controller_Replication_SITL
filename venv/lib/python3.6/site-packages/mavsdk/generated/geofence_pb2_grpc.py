# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from . import geofence_pb2 as geofence__pb2


class GeofenceServiceStub(object):
  """Enable setting a geofence.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.UploadGeofence = channel.unary_unary(
        '/mavsdk.rpc.geofence.GeofenceService/UploadGeofence',
        request_serializer=geofence__pb2.UploadGeofenceRequest.SerializeToString,
        response_deserializer=geofence__pb2.UploadGeofenceResponse.FromString,
        )


class GeofenceServiceServicer(object):
  """Enable setting a geofence.
  """

  def UploadGeofence(self, request, context):
    """
    Upload a geofence.

    Polygons are uploaded to a drone. Once uploaded, the geofence will remain
    on the drone even if a connection is lost.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_GeofenceServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'UploadGeofence': grpc.unary_unary_rpc_method_handler(
          servicer.UploadGeofence,
          request_deserializer=geofence__pb2.UploadGeofenceRequest.FromString,
          response_serializer=geofence__pb2.UploadGeofenceResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'mavsdk.rpc.geofence.GeofenceService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
